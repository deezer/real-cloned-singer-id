import copy
import math
from typing import Any, Callable, Tuple

import timm  # type: ignore
import torch
import torch.nn.functional as F
from einops import rearrange
from torchinfo import summary

from foundation.constants import N_FRAMES, N_MELS
from training.parameters import FEATURE_DIM, HIDDEN_DIM, PROJ_DIM


class PatchEmbed(torch.nn.Module):
    """
    Input to Patch Embedding using a Conv2D instead of a linear layer to work with different input lengths.
    """

    def __init__(
        self,
        dim_input: Tuple[int, int],
        in_channels: int,
        dim_embed: int,
        dim_patch: Tuple[int, int] = (16, 16),
        zero_padding: bool = False,
    ) -> None:
        super(PatchEmbed, self).__init__()

        self.in_channels = in_channels
        self.dim_input = dim_input
        self.dim_patch = dim_patch
        self.zero_padding = zero_padding
        self.dim_embed = dim_embed

        self.proj = torch.nn.Conv2d(in_channels, dim_embed, kernel_size=self.dim_patch, stride=self.dim_patch)
        self.compute_n_patches()
        # self.forward(torch.rand([2, in_channels, *dim_input]))

    def compute_n_patches(self) -> None:
        self.n_patches = (
            self.dim_input[0] // self.dim_patch[0],
            self.dim_input[1] // self.dim_patch[1],
        )

    def get_n_patches(self) -> int:
        return self.n_patches[0] * self.n_patches[1]

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        if self.zero_padding:
            w, h = x.shape[-2:]
            pd_fn: Callable[[int, int], int] = lambda x, y: 0 if x % y == 0 else y - (x % y)
            pd = (pd_fn(w, self.dim_patch[0]), pd_fn(h, self.dim_patch[1]))
            x = F.pad(x, pd, "constant", 0)

        if x.shape[-2:] != self.dim_input:
            self.dim_input = (x.shape[-2], x.shape[-1])
            self.compute_n_patches()

        x = self.proj(x)

        return rearrange(x, "b d w h -> b (w h) d")


def trunc_normal_(
    tensor: torch.Tensor,
    mean: float = 0.0,
    std: float = 1.0,
    a: float = -2.0,
    b: float = 2.0,
) -> torch.Tensor:
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x: float) -> float:
        # Computes standard normal cumulative distribution function
        return (1.0 + math.erf(x / math.sqrt(2.0))) / 2.0

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        print(
            "Mean is more than 2 std from [a, b] in nn.init.trunc_normal_. The distribution of values may be incorrect."
        )

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        w = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [w, u], then translate to
        # [2w-1, 2u-1].
        tensor.uniform_(2 * w - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.0))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


class ASTModel(torch.nn.Module):
    """
    The AST (Audio Spectrogram Transformer) model from: https://github.com/YuanGongND/ast .
    """

    def __init__(
        self,
        n_mels: int,
        n_frames: int,
        feature_dim: int,
        in_channels: int = 2,
        model_size: str = "small224",
    ) -> None:
        """
        Args:
            n_frames (int):
                Number of time frames.
            n_mels (int):
                Number of mel-frequency filters.
            feature_dim (int):
                Feature dimension.
            model_size (str, optional):
                Model size to use.
                Can be "tiny224", "small224", "base224", and "base384".
        """
        super(ASTModel, self).__init__()
        self.n_frames = n_frames
        self.n_mels = n_mels

        assert (
            timm.__version__ >= "0.4.5"
        ), "Please use timm >= 0.4.5, the code might not be compatible with newer versions."

        if model_size == "tiny224":
            model_tmp = timm.create_model("vit_tiny_patch16_224", pretrained=False)
        elif model_size == "small224":
            model_tmp = timm.create_model("vit_small_patch16_224", pretrained=False)
        elif model_size == "base224":
            model_tmp = timm.create_model("vit_base_patch16_224", pretrained=False)
        elif model_size == "base384":
            model_tmp = timm.create_model("vit_base_patch16_384", pretrained=False)
        else:
            raise Exception("Model size must be one of tiny224, small224, base224, base384.")
        self.blocks = copy.deepcopy(model_tmp.blocks)
        self.pos_drop = copy.deepcopy(model_tmp.pos_drop)
        dim_embed = model_tmp.blocks[0].norm1.weight.shape[0]
        self.patch_embed = PatchEmbed(
            in_channels=in_channels,
            dim_input=(self.n_mels, self.n_frames),
            dim_embed=(dim_embed),
        )
        self.pos_embed = torch.nn.Parameter(
            torch.randn(
                1,
                self.patch_embed.get_n_patches() + 1,  # the cls_tokens
                dim_embed,
            )
        )
        trunc_normal_(self.pos_embed, std=0.02)
        self.cls_token = torch.nn.Parameter(torch.randn(1, 1, dim_embed))
        trunc_normal_(self.cls_token, std=0.02)

        # create final layer to compute the final feature map
        self.feature_map_layer = torch.nn.Sequential(
            *[
                torch.nn.Linear(
                    in_features=self.blocks[-1].mlp.fc2.out_features,
                    out_features=feature_dim,
                    bias=True,
                )
            ],
            torch.nn.GELU(),
        )

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        x = self.patch_embed(x)
        x = torch.cat((self.cls_token.expand(x.shape[0], -1, -1), x), dim=1)
        x = x + self.pos_embed
        x = self.pos_drop(x)
        for blk in self.blocks:
            x = blk(x)
        # output is the mean of both tokens
        # x = (x[:, 0] + x[:, 1]) / 2
        x = self.feature_map_layer(x[:, 0])
        return x


class Projection(torch.nn.Module):
    """
    Taken from: https://github.com/Lightning-Universe/lightning-bolts/blob/master/src/pl_bolts/models/self_supervised/simclr/simclr_module.py
    """

    def __init__(
        self,
        input_dim: int,
        hidden_dim: int,
        output_dim: int,
    ) -> None:
        super().__init__()

        self.model = torch.nn.Sequential(
            torch.nn.Linear(input_dim, hidden_dim),
            torch.nn.BatchNorm1d(hidden_dim),
            torch.nn.ReLU(),
            torch.nn.Linear(hidden_dim, hidden_dim),
            torch.nn.BatchNorm1d(hidden_dim),
            torch.nn.ReLU(),
            torch.nn.Linear(hidden_dim, output_dim, bias=False),
        )

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        x = self.model(x)
        return torch.nn.functional.normalize(x, dim=1)


class TrainingWrapper(torch.nn.Module):
    """
    Wrapper module for model and projector.
    """

    def __init__(
        self,
        n_mels: int,
        n_frames: int,
        feature_dim: int,
        hidden_dim: int,
        output_dim: int,
    ) -> None:
        """
        Check ASTModel and Projection object args for details.
        """
        super().__init__()

        self.feature_model = ASTModel(
            n_mels=n_mels,
            n_frames=n_frames,
            in_channels=2,
            feature_dim=feature_dim,
            model_size="small224",
        )
        self.projector = Projection(
            input_dim=feature_dim,
            hidden_dim=hidden_dim,
            output_dim=output_dim,
        )

    def forward(self, x: torch.Tensor) -> Any:
        return self.projector(self.feature_model(x))


if __name__ == "__main__":
    model = TrainingWrapper(N_MELS, N_FRAMES, FEATURE_DIM, HIDDEN_DIM, PROJ_DIM).cuda()
    summary(model.eval(), input_size=(128, 2, N_MELS, N_FRAMES))
